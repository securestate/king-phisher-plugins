#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  pre-commit
#
#  Copyright 2016 Spencer McIntyre <zeroSteiner@gmail.com>
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the  nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


import argparse
import datetime
import getpass
import glob
import importlib
import json
import os
import sys
import textwrap
from hashlib import md5

import ecdsa
import jinja2
from Crypto.Cipher import AES

__version__ = '1.1'

if sys.version_info < (3, 4):
	# python 3 is required to import without an __init__.py file
	print('this requires at least python version 3.4 to run')
	sys.exit(os.EX_SOFTWARE)

plugins_dir = os.path.dirname(os.path.abspath(__file__))
if plugins_dir.endswith(os.path.join('.git', 'hooks')):
	plugins_dir = os.path.normpath(os.path.join(plugins_dir, '..', '..'))
king_phisher_dir = os.path.normpath(os.path.join(plugins_dir, '..', 'king-phisher'))

sys.path.insert(0, king_phisher_dir)
sys.path.insert(0, plugins_dir)

try:
	import git
except ImportError:
	print('failed to import GitPython')
	sys.exit(os.EX_UNAVAILABLE)

try:
	import king_phisher.catalog as catalog
	import king_phisher.security_keys as security_keys
	import king_phisher.serializers as serializers
except ImportError as error:
	print('failed to import king_phisher')
	print('path assumed to be at: ' + king_phisher_dir)
	print('Exception: ' + error)
	sys.exit(os.EX_UNAVAILABLE)


class Decrypt:
	@staticmethod
	def _chr(i):
		if isinstance(i, bytes):
			return i
		return chr(i).encode('utf-8')

	@staticmethod
	def _derive_key_and_iv(password, salt, key_length, iv_length):
		d = d_i = b''
		while len(d) < key_length + iv_length:
			d_i = md5(d_i + password + salt).digest()
			d += d_i
		return d[:key_length], d[key_length:key_length+iv_length]

	@staticmethod
	def key_file(in_file, password=None, key_length=32):
		if password is None:
			return None

		assert isinstance(password, bytes)
		assert isinstance(key_length, int)

		bs = AES.block_size
		salt = in_file.read(bs)[len(b'Salted__'):]
		key, iv = Decrypt._derive_key_and_iv(password, salt, key_length, bs)
		cipher = AES.new(key, AES.MODE_CBC, iv)
		next_chunk = b''
		finished = False
		decrypted_value = b''
		while not finished:
			chunk, next_chunk = next_chunk, cipher.decrypt(in_file.read(1024 * bs))
			if not next_chunk:
				padding_length = ord(Decrypt._chr(chunk[-1]))
				chunk = chunk[:-padding_length]
				finished = True
			decrypted_value += chunk
		return decrypted_value.decode('utf-8')


def load_plugins(plugin_type, plugins_dir, verbose=False):
	plugins = []
	plugins_dir = os.path.join(plugins_dir, plugin_type)
	for plugin in glob.glob(os.path.join(plugins_dir, '*.py')):
		plugin = os.path.basename(plugin)
		plugin = os.path.splitext(plugin)[0]
		if verbose:
			print('loading ' + plugin_type + ' plugin: ' + plugin)
		plugin_module = importlib.import_module(plugin_type + '.' + plugin)
		plugins.append(plugin_module.Plugin)

	for plugin in os.listdir(plugins_dir):
		if not os.path.isdir(os.path.join(plugins_dir, plugin)):
			continue
		if not os.path.isfile(os.path.join(plugins_dir, plugin, '__init__.py')):
			continue
		if verbose:
			print('loading ' + plugin_type + ' plugin: ' + plugin)
		plugin_module = importlib.import_module(plugin_type + '.' + plugin)
		plugins.append(plugin_module.Plugin)
	return plugins


def _make_plugin_collections(plugin_type, plugins_repo, plugins, signing_key, signing_key_id, verbose=False):
	plugins_collection = []
	plugins_dir = plugins_repo.working_tree_dir
	for plugin in plugins[plugin_type]:
		plugin_path = os.path.join(plugins_dir, plugin_type, plugin.name)
		if os.path.isfile(plugin_path + '.py'):
			plugin_path += '.py'
		elif not (os.path.isdir(plugin_path) and os.path.isfile(os.path.join(plugin_path, '__init__.py'))):
			raise RuntimeError("unknown path for {0} plugin: {1}".format(plugin_type, plugin.name))
		plugin = plugin.metadata

		if verbose:
			print('signing files for ' + plugin_type + ' plugin: ' + plugin['name'])
		plugin['files'] = list(catalog.sign_item_files(plugin_path, signing_key, signing_key_id, repo_path=plugins_dir))
		for idx, item_file in enumerate(plugin['files']):
			plugin['files'][idx] = {
				'path-destination': item_file.path_destination,
				'path-source': item_file.path_source,
				'signature': item_file.signature,
				'signed-by': item_file.signed_by
			}
		plugins_collection.append(plugin)
	return plugins_collection


def make_plugin_collections(plugins_repo, plugins, signing_key, signing_key_id, verbose=False):
	collection = {
		'plugins/client': _make_plugin_collections('client', plugins_repo, plugins, signing_key, signing_key_id, verbose=verbose),
		'plugins/server': _make_plugin_collections('server', plugins_repo, plugins, signing_key, signing_key_id, verbose=verbose),
	}
	return collection


def main():
	parser = argparse.ArgumentParser(description='pre-commit hook', conflict_handler='resolve')
	parser.add_argument('-k', '--key', default=os.getenv('KING_PHISHER_DEV_KEY'), help='path to a signing key. (.enc supported)')
	parser.add_argument('-V', '--verbose', action='store_true', default=False, help='print verbose output')
	parser.add_argument('-v', '--version', action='version', version='%(prog)s Version: ' + __version__)
	parser.add_argument('--git-no-add', action='store_false', default=True, dest='git_add', help='don\'t stage changed files in git')
	arguments = parser.parse_args()

	if arguments.key is None:
		print('must specify a dev key path')
		return os.EX_USAGE
	if not os.path.isfile(arguments.key):
		print('invalid path to dev key: ' + arguments.key)
		return os.EX_USAGE
	if not os.access(arguments.key, os.R_OK):
		print('missing read privileges on dev key: ' + arguments.key)
		return os.EX_NOPERM

	if not arguments.key.endswith('.enc'):
		write = 'r'
	else:
		arguments.password = (getpass.getpass()).encode('utf-8')
		write = 'rb'

	with open(arguments.key, write) as file_h:

		if arguments.key.endswith('.enc'):
			try:
				decrypted_data = Decrypt.key_file(file_h, password=arguments.password)

				if decrypted_data is not None:
					file_h = decrypted_data
					key = json.loads(file_h)

			except Exception:
				raise ValueError('Invalid Password')

		else:
			key = serializers.JSON.load(file_h)

		signing_key_id = key['id']
		signing_key = key['signing-key']
		signing_key = security_keys.SigningKey.from_dict(signing_key, encoding=signing_key.pop('encoding', 'base64'))

	if arguments.verbose:
		print('plugins directory: ' + plugins_dir)
	plugins_repo = git.Repo(plugins_dir)

	jinja_env = jinja2.Environment(trim_blocks=True)
	jinja_env.filters['strftime'] = lambda dt, fmt: dt.strftime(fmt)
	with open(os.path.join(plugins_dir, 'README.jnj'), 'r') as file_h:
		readme_template = jinja_env.from_string(file_h.read())

	plugins = {
		'client': load_plugins('client', plugins_dir, verbose=arguments.verbose),
		'server': load_plugins('server', plugins_dir, verbose=arguments.verbose)
	}
	readme = readme_template.render(
		plugins=plugins,
		timestamp=datetime.datetime.utcnow()
	)
	with open(os.path.join(plugins_dir, 'README.md'), 'w') as file_h:
		file_h.write(readme)
	if arguments.git_add:
		plugins_repo.index.add(['README.md'])

	collection = {
		'created': datetime.datetime.utcnow().isoformat() + '+00:00',
		'created-by': signing_key_id,
		'collections': make_plugin_collections(
			plugins_repo,
			plugins,
			signing_key,
			signing_key_id,
			verbose=arguments.verbose
		),
		'signed-by': signing_key_id
	}
	collection = signing_key.sign_dict(collection)
	with open(os.path.join(plugins_dir, 'catalog-collections.json'), 'w') as file_h:
		serializers.JSON.dump(collection, file_h)
	if arguments.git_add:
		plugins_repo.index.add(['catalog-collections.json'])
	return os.EX_OK

if __name__ == '__main__':
	sys.exit(main())
